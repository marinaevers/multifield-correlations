{"version":3,"sources":["webpack:///./src/lib/components/MultiFieldMapView.react.js"],"names":["MultiFieldMapView","multifieldmap","MultiFieldMapViewD3","el","props","update","id","Component","defaultProps","width","height","propTypes","PropTypes","string","setProps","func","number","imageWidth","imageHeight","polygons","array","isRequired","colormap","object","path"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAuC;AACJ;AACmB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AANA,IAOqBA,iBAAiB;EAAA;EAAA;EAAA;IAAA;IAAA;EAAA;EAAA;IAAA;IAAA,OAClC,6BAAoB;MAChB,IAAI,CAACC,aAAa,GAAG,IAAIC,0DAAmB,CAAC,IAAI,CAACC,EAAE,EAAE,IAAI,CAACC,KAAK,CAAC;IACrE;EAAC;IAAA;IAAA,OAED,8BAAqB;MACjB,IAAI,CAACH,aAAa,CAACI,MAAM,CAAC,IAAI,CAACD,KAAK,CAAC;IACzC;EAAC;IAAA;IAAA,OAED,kBAAS;MAAA;MACL,oBAAO;QAAK,EAAE,EAAE,IAAI,CAACA,KAAK,CAACE,EAAG;QAAC,GAAG,EAAE,aAAAH,EAAE,EAAI;UAAC,KAAI,CAACA,EAAE,GAAGA,EAAE;QAAA;MAAE,EAAG;IAChE;EAAC;EAAA;AAAA,EAX0CI,+CAAS;AAAlB;AActCP,iBAAiB,CAACQ,YAAY,GAAG;EAC7BC,KAAK,EAAE,GAAG;EACVC,MAAM,EAAE;EACR;AACJ,CAAC;;AAEDV,iBAAiB,CAACW,SAAS,GAAG;EAC1B;AACJ;AACA;EACIL,EAAE,EAAEM,iDAAS,CAACC,MAAM;EAEpB;AACJ;AACA;AACA;EACIC,QAAQ,EAAEF,iDAAS,CAACG,IAAI;EACxBN,KAAK,EAAEG,iDAAS,CAACI,MAAM;EACvBN,MAAM,EAAEE,iDAAS,CAACI,MAAM;EACxBC,UAAU,EAAEL,iDAAS,CAACI,MAAM;EAC5BE,WAAW,EAAEN,iDAAS,CAACI,MAAM;EAC7BG,QAAQ,EAAEP,iDAAS,CAACQ,KAAK,CAACC,UAAU;EACpCC,QAAQ,EAAEV,iDAAS,CAACW,MAAM,CAACF,UAAU;EACrCG,IAAI,EAAEZ,iDAAS,CAACC;AACpB,CAAC,C","file":"91b309e-main-wps-hmr.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport MultiFieldMapViewD3 from './MultiFieldMapView';\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nexport default class MultiFieldMapView extends Component {\n    componentDidMount() {\n        this.multifieldmap = new MultiFieldMapViewD3(this.el, this.props);\n    }\n\n    componentDidUpdate() {\n        this.multifieldmap.update(this.props);\n    }\n\n    render() {\n        return <div id={this.props.id} ref={el => {this.el = el}} />;\n    }\n}\n\nMultiFieldMapView.defaultProps = {\n    width: 800,\n    height: 400,\n    //path: \"/src/lib/components/coastline-world.png\"\n};\n\nMultiFieldMapView.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    imageWidth: PropTypes.number,\n    imageHeight: PropTypes.number,\n    polygons: PropTypes.array.isRequired,\n    colormap: PropTypes.object.isRequired,\n    path: PropTypes.string\n};\n"],"sourceRoot":""}