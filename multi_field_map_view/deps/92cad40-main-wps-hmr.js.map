{"version":3,"sources":["webpack:///./src/lib/components/MultiFieldMapView.js","webpack:///./src/lib/components/MultiFieldMapView.react.js"],"names":["MultiFieldMapViewD3","el","props","svg","d3","append","attr","width","height","x","domain","imageWidth","range","y","imageHeight","polygons","selectAll","data","enter","d","points","map","p","colormap","field","MultiFieldMapView","multifieldmap","update","id","Component","defaultProps","propTypes","PropTypes","string","setProps","func","number","array","isRequired","object"],"mappings":"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","file":"92cad40-main-wps-hmr.js","sourcesContent":["import * as d3 from 'd3'\nimport { feature } from 'topojson';\n\nexport default class MultiFieldMapViewD3 {\n    constructor(el, props) {\n        this.props = props;\n\n        // https://dev.to/sriramvsharma/drawing-a-world-map-in-13-lines-of-code-368a\n        this.svg = d3.select(el).append('svg')\n            .attr(\"width\", props.width)\n            .attr(\"height\", props.height);\n        //this.svg.style(\"background\",\"url('\"+props.path+\"') no-repeat\");\n        /*const projection = d3.geoNaturalEarth1();\n        const pathGenerator = d3.geoPath().projection(projection);\n        this.svg.append(\"path\")\n            .attr(\"class\", \"sphere\")\n            .attr(\"d\", pathGenerator({type: \"Sphere\"}));\n        d3.json('https://unpkg.com/world-atlas@1.1.4/world/110m.json')\n            .then(data => {\n                const countries = feature(data, data.objects.countries);\n                this.svg.selectAll('path').data(countries.features)\n                    .enter().append('path')\n                    .attr('class', 'country')\n                    .attr('d', pathGenerator);\n            });*/\n\n        //this.svg.style(\"background-size\",\"800px 400px\");\n\n        const x = d3.scaleLinear()\n            .domain([0, props.imageWidth])\n            .range([0, props.width]);\n\n        const y = d3.scaleLinear()\n            .domain([0, props.imageHeight])\n            .range([0, props.height]);\n\n        const polygons = this.svg.selectAll('polygons')\n            .data(props.polygons)\n            .enter()\n            .append('polygon')\n            .attr('points', function(d) {\n                return d.points.map((p) => [x(p[0]), y(p[1])]);\n            })\n            .attr('stroke', function(d) {\n                return props.colormap[d.field];\n            })\n            .attr('fill', 'none');\n    }\n\n    update(props) {\n        this.props = props;\n    }\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport MultiFieldMapViewD3 from './MultiFieldMapView';\n\n/**\n * ExampleComponent is an example component.\n * It takes a property, `label`, and\n * displays it.\n * It renders an input with the property `value`\n * which is editable by the user.\n */\nexport default class MultiFieldMapView extends Component {\n    componentDidMount() {\n        this.multifieldmap = new MultiFieldMapViewD3(this.el, this.props);\n    }\n\n    componentDidUpdate() {\n        this.multifieldmap.update(this.props);\n    }\n\n    render() {\n        return <div id={this.props.id} ref={el => {this.el = el}} />;\n    }\n}\n\nMultiFieldMapView.defaultProps = {\n    width: 800,\n    height: 400,\n    //path: \"/src/lib/components/coastline-world.png\"\n};\n\nMultiFieldMapView.propTypes = {\n    /**\n     * The ID used to identify this component in Dash callbacks.\n     */\n    id: PropTypes.string,\n\n    /**\n     * Dash-assigned callback that should be called to report property changes\n     * to Dash, to make them available for callbacks.\n     */\n    setProps: PropTypes.func,\n    width: PropTypes.number,\n    height: PropTypes.number,\n    imageWidth: PropTypes.number,\n    imageHeight: PropTypes.number,\n    polygons: PropTypes.array.isRequired,\n    colormap: PropTypes.object.isRequired\n};\n"],"sourceRoot":""}