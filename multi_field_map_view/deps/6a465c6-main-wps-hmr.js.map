{"version":3,"sources":["webpack:///./src/lib/components/MultiFieldMapView.js"],"names":["MultiFieldMapViewD3","el","props","drawPolygons","bind","update","svg","d3","append","attr","width","height","style","path","x","domain","imageWidth","range","y","imageHeight","points","map","d","Math","floor","selectAll","data","enter","lasso","closePathSelect","closePathDistance","items","targetArea","call","on","selectedPixels","selectedItems","console","log","polygons","p","colormap","field","remove"],"mappings":"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","file":"6a465c6-main-wps-hmr.js","sourcesContent":["import * as d3 from 'd3'\nimport 'd3-lasso';\n\nexport default class MultiFieldMapViewD3 {\n    constructor(el, props) {\n        this.props = props;\n        this.drawPolygons = this.drawPolygons.bind(this);\n        this.update = this.update.bind(this);\n\n        // https://dev.to/sriramvsharma/drawing-a-world-map-in-13-lines-of-code-368a\n        this.svg = d3.select(el).append('svg')\n            .attr(\"width\", props.width)\n            .attr(\"height\", props.height);\n        this.svg.style(\"background\",\"url('\"+props.path+\"') no-repeat\");\n        /* const projection = d3.geoNaturalEarth1();\n        const pathGenerator = d3.geoPath().projection(projection);\n        this.svg.append(\"path\")\n            .attr(\"class\", \"sphere\")\n            .attr(\"d\", pathGenerator({type: \"Sphere\"}));\n        d3.json('https://unpkg.com/world-atlas@1.1.4/world/110m.json')\n            .then(data => {\n                const countries = feature(data, data.objects.countries);\n                this.svg.selectAll('path').data(countries.features)\n                    .enter().append('path')\n                    .attr('class', 'country')\n                    .attr('d', pathGenerator);\n            });*/\n\n        this.svg.style(\"background-size\",\"800px 400px\");\n\n        // this.drawPolygons();\n        const x = d3.scaleLinear()\n            .domain([0, this.props.imageWidth])\n            .range([0, this.props.width]);\n\n        const y = d3.scaleLinear()\n            .domain([this.props.imageHeight, 0])\n            .range([0, this.props.height]);\n\n        const width = this.props.width;\n\n        var points = d3.range(this.props.width * this.props.height).map(function(d) {\n            var x = d % width;\n            var y = Math.floor(d / width);\n            return [x, y];\n        });\n\n        this.svg.selectAll(\"circle\")\n            .data(points)\n            .enter()\n            .append(\"circle\")\n            .attr(\"class\", \"pixel\")\n            .attr(\"cx\", function(d) { return x(d[0]); })\n            .attr(\"cy\", function(d) { return y(d[1]); })\n            .attr(\"r\", 0);\n\n        var lasso = d3.lasso()\n            .closePathSelect(true)\n            .closePathDistance(100)\n            .items(this.svg.selectAll(\".pixel\"))\n            .targetArea(this.svg);\n\n        this.svg.call(lasso);\n\n        // Define the callback function for when the lasso selection is complete\n        lasso.on(\"end\", function() {\n            // Retrieve the selected circles and extract their coordinates\n            var selectedPixels = lasso.selectedItems()\n                .data()\n                .map(function(d) { return [d[0], d[1]]; });\n\n            // Log the selected coordinates to the console\n            console.log(selectedPixels);\n        });\n    }\n\n    drawPolygons() {\n        const props = this.props\n        const x = d3.scaleLinear()\n            .domain([0, this.props.imageWidth])\n            .range([0, this.props.width]);\n\n        const y = d3.scaleLinear()\n            .domain([this.props.imageHeight, 0])\n            .range([0, this.props.height]);\n\n        this.svg.selectAll('polygons')\n            .data(this.props.polygons)\n            .enter()\n            .append('polygon')\n            .attr('class', 'polygon')\n            .attr('points', function(d) {\n                return d.points.map((p) => [x(p[0]), y(p[1])]);\n            })\n            .attr('stroke', function(d) {\n                return props.colormap[d.field];\n            })\n            .attr('stroke-width', 3)\n            .attr('fill', 'none');\n    }\n\n    update(props) {\n        this.props = props;\n        this.svg.selectAll('.polygon').remove();\n        this.drawPolygons();\n    }\n}"],"sourceRoot":""}