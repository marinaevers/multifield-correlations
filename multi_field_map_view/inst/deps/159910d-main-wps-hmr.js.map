{"version":3,"sources":["webpack:///./src/lib/components/MultiFieldMapView.js"],"names":["MultiFieldMapViewD3","el","props","drawPolygons","bind","update","svg","d3","append","attr","width","height","style","path","x","domain","imageWidth","range","y","imageHeight","points","map","d","Math","floor","circles","selectAll","data","enter","coords","lineGenerator","pointInPolygon","point","vs","inside","i","j","length","xi","yi","xj","yj","intersect","drawPath","dragStart","remove","dragMove","event","mouseX","sourceEvent","offsetX","mouseY","offsetY","push","dragEnd","selectedDots","each","setProps","selection","drag","on","call","polygons","p","colormap","field"],"mappings":";;;;;;;;;;;;;;;;;;;AAAyB;AAAA,IAEJA,mBAAmB;EACpC,6BAAYC,EAAE,EAAEC,KAAK,EAAE;IAAA;IACnB,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACC,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC;IAEpC,IAAI,CAACE,GAAG,GAAGC,yCAAS,CAACN,EAAE,CAAC,CAACO,MAAM,CAAC,KAAK,CAAC,CACjCC,IAAI,CAAC,OAAO,EAAEP,KAAK,CAACQ,KAAK,CAAC,CAC1BD,IAAI,CAAC,QAAQ,EAAEP,KAAK,CAACS,MAAM,CAAC;IACjC,IAAI,CAACL,GAAG,CAACM,KAAK,CAAC,YAAY,EAAC,OAAO,GAACV,KAAK,CAACW,IAAI,GAAC,cAAc,CAAC;IAE9D,IAAI,CAACP,GAAG,CAACM,KAAK,CAAC,iBAAiB,EAAC,aAAa,CAAC;IAE/C,IAAI,CAACT,YAAY,EAAE;IACnB,IAAMW,CAAC,GAAGP,8CAAc,EAAE,CACrBQ,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACb,KAAK,CAACc,UAAU,CAAC,CAAC,CAClCC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,CAACQ,KAAK,CAAC,CAAC;IAEjC,IAAMQ,CAAC,GAAGX,8CAAc,EAAE,CACrBQ,MAAM,CAAC,CAAC,IAAI,CAACb,KAAK,CAACiB,WAAW,EAAE,CAAC,CAAC,CAAC,CACnCF,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,CAACS,MAAM,CAAC,CAAC;IAElC,IAAMD,KAAK,GAAG,IAAI,CAACR,KAAK,CAACc,UAAU;IAEnC,IAAII,MAAM,GAAGb,wCAAQ,CAAC,IAAI,CAACL,KAAK,CAACc,UAAU,GAAG,IAAI,CAACd,KAAK,CAACiB,WAAW,CAAC,CAACE,GAAG,CAAC,UAASC,CAAC,EAAE;MAClF,IAAIR,CAAC,GAAGQ,CAAC,GAAGZ,KAAK;MACjB,IAAIQ,CAAC,GAAGK,IAAI,CAACC,KAAK,CAACF,CAAC,GAAGZ,KAAK,CAAC;MAC7B,OAAO,CAACI,CAAC,EAAEI,CAAC,CAAC;IACjB,CAAC,CAAC;IAEF,IAAMO,OAAO,GAAG,IAAI,CAACnB,GAAG,CAACoB,SAAS,CAAC,QAAQ,CAAC,CACvCC,IAAI,CAACP,MAAM,CAAC,CACZQ,KAAK,EAAE,CACPpB,MAAM,CAAC,QAAQ,CAAC,CAChBC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CACtBA,IAAI,CAAC,IAAI,EAAE,UAASa,CAAC,EAAE;MAAE,OAAOR,CAAC,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAC3Cb,IAAI,CAAC,IAAI,EAAE,UAASa,CAAC,EAAE;MAAE,OAAOJ,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC;IAAE,CAAC,CAAC,CAC3Cb,IAAI,CAAC,IAAI,EAAE,UAASa,CAAC,EAAE;MAAE,OAAOA,CAAC;IAAE,CAAC,CAAC,CACrCb,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC;;IAEnB;IACA,IAAIoB,MAAM,GAAG,EAAE;IACf,IAAMC,aAAa,GAAGvB,uCAAO,EAAE;IAE/B,IAAMD,GAAG,GAAG,IAAI,CAACA,GAAG;IAEpB,IAAMyB,cAAc,GAAG,SAAjBA,cAAc,CAAaC,KAAK,EAAEC,EAAE,EAAE;MACxC;MACA;MACA;;MAEA,IAAInB,CAAC,GAAGkB,KAAK,CAAC,CAAC,CAAC;QACZd,CAAC,GAAGc,KAAK,CAAC,CAAC,CAAC;MAEhB,IAAIE,MAAM,GAAG,KAAK;MAClB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGH,EAAE,CAACI,MAAM,GAAG,CAAC,EAAEF,CAAC,GAAGF,EAAE,CAACI,MAAM,EAAED,CAAC,GAAGD,CAAC,EAAE,EAAE;QACvD,IAAIG,EAAE,GAAGL,EAAE,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;UACbI,EAAE,GAAGN,EAAE,CAACE,CAAC,CAAC,CAAC,CAAC,CAAC;QACjB,IAAIK,EAAE,GAAGP,EAAE,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;UACbK,EAAE,GAAGR,EAAE,CAACG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjB,IAAIM,SAAS,GACTH,EAAE,GAAGrB,CAAC,KAAKuB,EAAE,GAAGvB,CAAC,IACjBJ,CAAC,GAAI,CAAC0B,EAAE,GAAGF,EAAE,KAAKpB,CAAC,GAAGqB,EAAE,CAAC,IAAKE,EAAE,GAAGF,EAAE,CAAC,GAAGD,EAAE;QAC/C,IAAII,SAAS,EAAE;UAACR,MAAM,GAAG,CAACA,MAAM;QAAC;MACrC;MAEA,OAAOA,MAAM;IACjB,CAAC;IAED,SAASS,QAAQ,GAAG;MAChBpC,yCAAS,CAAC,QAAQ,CAAC,CACdK,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CACxBA,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC,CACxBA,KAAK,CAAC,MAAM,EAAE,kBAAkB,CAAC,CACjCH,IAAI,CAAC,GAAG,EAAEqB,aAAa,CAACD,MAAM,CAAC,CAAC;IACzC;IAEA,SAASe,SAAS,GAAG;MACjBf,MAAM,GAAG,EAAE;MACXJ,OAAO,CAAChB,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC;MACjCF,yCAAS,CAAC,QAAQ,CAAC,CAACsC,MAAM,EAAE;MAC5BvC,GAAG,CACEE,MAAM,CAAC,MAAM,CAAC,CACdC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;IAC5B;IAEA,SAASqC,QAAQ,CAACC,KAAK,EAAE;MACrB,IAAMC,MAAM,GAAGD,KAAK,CAACE,WAAW,CAACC,OAAO;MACxC,IAAMC,MAAM,GAAGJ,KAAK,CAACE,WAAW,CAACG,OAAO;MACxCvB,MAAM,CAACwB,IAAI,CAAC,CAACL,MAAM,EAAEG,MAAM,CAAC,CAAC;MAC7BR,QAAQ,EAAE;IACd;IAEA,SAASW,OAAO,GAAG;MACf,IAAMC,YAAY,GAAG,EAAE;MACvB9B,OAAO,CAAC+B,IAAI,CAAC,UAAClC,CAAC,EAAEa,CAAC,EAAK;QACnB,IAAMH,KAAK,GAAG,CACVlB,CAAC,CAACQ,CAAC,CAAC,CAAC,CAAC,CAAC,EACPJ,CAAC,CAACI,CAAC,CAAC,CAAC,CAAC,CAAC,CACV;QACD,IAAIS,cAAc,CAACC,KAAK,EAAEH,MAAM,CAAC,EAAE;UAC/B;UACA0B,YAAY,CAACF,IAAI,CAAC/B,CAAC,CAAC;QACxB;MACJ,CAAC,CAAC;MACFpB,KAAK,CAACuD,QAAQ,CAAC;QAACC,SAAS,EAACH;MAAY,CAAC,CAAC;IAC5C;IAEA,IAAMI,IAAI,GAAGpD,uCACJ,EAAE,CACNqD,EAAE,CAAC,OAAO,EAAEhB,SAAS,CAAC,CACtBgB,EAAE,CAAC,MAAM,EAAEd,QAAQ,CAAC,CACpBc,EAAE,CAAC,KAAK,EAAEN,OAAO,CAAC;IAEvB,IAAI,CAAChD,GAAG,CAACuD,IAAI,CAACF,IAAI,CAAC;EAEvB;EAAC;IAAA;IAAA,OAED,wBAAe;MACX,IAAMzD,KAAK,GAAG,IAAI,CAACA,KAAK;MACxB,IAAMY,CAAC,GAAGP,8CAAc,EAAE,CACrBQ,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACb,KAAK,CAACc,UAAU,CAAC,CAAC,CAClCC,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,CAACQ,KAAK,CAAC,CAAC;MAEjC,IAAMQ,CAAC,GAAGX,8CAAc,EAAE,CACrBQ,MAAM,CAAC,CAAC,IAAI,CAACb,KAAK,CAACiB,WAAW,EAAE,CAAC,CAAC,CAAC,CACnCF,KAAK,CAAC,CAAC,CAAC,EAAE,IAAI,CAACf,KAAK,CAACS,MAAM,CAAC,CAAC;MAElC,IAAI,CAACL,GAAG,CAACoB,SAAS,CAAC,UAAU,CAAC,CACzBC,IAAI,CAAC,IAAI,CAACzB,KAAK,CAAC4D,QAAQ,CAAC,CACzBlC,KAAK,EAAE,CACPpB,MAAM,CAAC,SAAS,CAAC,CACjBC,IAAI,CAAC,OAAO,EAAE,SAAS,CAAC,CACxBA,IAAI,CAAC,QAAQ,EAAE,UAASa,CAAC,EAAE;QACxB,OAAOA,CAAC,CAACF,MAAM,CAACC,GAAG,CAAC,UAAC0C,CAAC;UAAA,OAAK,CAACjD,CAAC,CAACiD,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE7C,CAAC,CAAC6C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAAA,EAAC;MAClD,CAAC,CAAC,CACDtD,IAAI,CAAC,QAAQ,EAAE,UAASa,CAAC,EAAE;QACxB,OAAOpB,KAAK,CAAC8D,QAAQ,CAAC1C,CAAC,CAAC2C,KAAK,CAAC;MAClC,CAAC,CAAC,CACDxD,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CACvBA,IAAI,CAAC,MAAM,EAAE,MAAM,CAAC;IAC7B;EAAC;IAAA;IAAA,OAED,gBAAOP,KAAK,EAAE;MACV,IAAI,CAACA,KAAK,GAAGA,KAAK;MAClB,IAAI,CAACI,GAAG,CAACoB,SAAS,CAAC,UAAU,CAAC,CAACmB,MAAM,EAAE;MACvC,IAAI,CAAC1C,YAAY,EAAE;IACvB;EAAC;EAAA;AAAA","file":"159910d-main-wps-hmr.js","sourcesContent":["import * as d3 from 'd3';\n\nexport default class MultiFieldMapViewD3 {\n    constructor(el, props) {\n        this.props = props;\n        this.drawPolygons = this.drawPolygons.bind(this);\n        this.update = this.update.bind(this);\n\n        this.svg = d3.select(el).append('svg')\n            .attr(\"width\", props.width)\n            .attr(\"height\", props.height);\n        this.svg.style(\"background\",\"url('\"+props.path+\"') no-repeat\");\n\n        this.svg.style(\"background-size\",\"800px 400px\");\n\n        this.drawPolygons();\n        const x = d3.scaleLinear()\n            .domain([0, this.props.imageWidth])\n            .range([0, this.props.width]);\n\n        const y = d3.scaleLinear()\n            .domain([this.props.imageHeight, 0])\n            .range([0, this.props.height]);\n\n        const width = this.props.imageWidth;\n\n        var points = d3.range(this.props.imageWidth * this.props.imageHeight).map(function(d) {\n            var x = d % width;\n            var y = Math.floor(d / width);\n            return [x, y];\n        });\n\n        const circles = this.svg.selectAll(\"circle\")\n            .data(points)\n            .enter()\n            .append(\"circle\")\n            .attr(\"class\", \"pixel\")\n            .attr(\"cx\", function(d) { return x(d[0]); })\n            .attr(\"cy\", function(d) { return y(d[1]); })\n            .attr(\"id\", function(d) { return d; })\n            .attr(\"r\", 0.0);\n\n        // lasso selection based on the drag events\n        let coords = [];\n        const lineGenerator = d3.line();\n\n        const svg = this.svg;\n\n        const pointInPolygon = function (point, vs) {\n            // console.log(point, vs);\n            // ray-casting algorithm based on\n            // https://wrf.ecse.rpi.edu/Research/Short_Notes/pnpoly.html/pnpoly.html\n\n            var x = point[0],\n                y = point[1];\n\n            var inside = false;\n            for (var i = 0, j = vs.length - 1; i < vs.length; j = i++) {\n                var xi = vs[i][0],\n                    yi = vs[i][1];\n                var xj = vs[j][0],\n                    yj = vs[j][1];\n\n                var intersect =\n                    yi > y !== yj > y &&\n                    x < ((xj - xi) * (y - yi)) / (yj - yi) + xi;\n                if (intersect) {inside = !inside;}\n            }\n\n            return inside;\n        };\n\n        function drawPath() {\n            d3.select(\"#lasso\")\n                .style(\"stroke\", \"black\")\n                .style(\"stroke-width\", 2)\n                .style(\"fill\", \"rgba(0,0,0,0.07)\")\n                .attr(\"d\", lineGenerator(coords));\n        }\n\n        function dragStart() {\n            coords = [];\n            circles.attr(\"fill\", \"steelblue\");\n            d3.select(\"#lasso\").remove();\n            svg\n                .append(\"path\")\n                .attr(\"id\", \"lasso\");\n        }\n\n        function dragMove(event) {\n            const mouseX = event.sourceEvent.offsetX;\n            const mouseY = event.sourceEvent.offsetY;\n            coords.push([mouseX, mouseY]);\n            drawPath();\n        }\n\n        function dragEnd() {\n            const selectedDots = [];\n            circles.each((d, i) => {\n                const point = [\n                    x(d[0]),\n                    y(d[1]),\n                ];\n                if (pointInPolygon(point, coords)) {\n                    //selectedDots.push(\"[\"+d[0]+\",\"+d[1]+\"]\");\n                    selectedDots.push(d);\n                }\n            });\n            props.setProps({selection:selectedDots});\n        }\n\n        const drag = d3\n            .drag()\n            .on(\"start\", dragStart)\n            .on(\"drag\", dragMove)\n            .on(\"end\", dragEnd);\n\n        this.svg.call(drag);\n\n    }\n\n    drawPolygons() {\n        const props = this.props\n        const x = d3.scaleLinear()\n            .domain([0, this.props.imageWidth])\n            .range([0, this.props.width]);\n\n        const y = d3.scaleLinear()\n            .domain([this.props.imageHeight, 0])\n            .range([0, this.props.height]);\n\n        this.svg.selectAll('polygons')\n            .data(this.props.polygons)\n            .enter()\n            .append('polygon')\n            .attr('class', 'polygon')\n            .attr('points', function(d) {\n                return d.points.map((p) => [x(p[0]), y(p[1])]);\n            })\n            .attr('stroke', function(d) {\n                return props.colormap[d.field];\n            })\n            .attr('stroke-width', 3)\n            .attr('fill', 'none');\n    }\n\n    update(props) {\n        this.props = props;\n        this.svg.selectAll('.polygon').remove();\n        this.drawPolygons();\n    }\n}"],"sourceRoot":""}